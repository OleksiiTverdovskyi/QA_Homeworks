{
	"info": {
		"_postman_id": "ae1e0c0d-4599-4cbd-b225-9c3d429c4017",
		"name": "HW_tests_environment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.2\r",
							"let jsonData = pm.response.json();\r",
							"pm.environment.set(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}login?login=wqeqwe&password=123123",
					"host": [
						"{{url}}login"
					],
					"query": [
						{
							"key": "login",
							"value": "wqeqwe"
						},
						{
							"key": "password",
							"value": "123123"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2 user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2.2\r",
							"pm.test(\"Json-schema is ok\", function () {const schema = { \r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"  //2.3\r",
							"   let req = JSON.parse(request.data);\r",
							"   let resp = pm.response.json();\r",
							"   let salary = req.salary;\r",
							"   let resp_salary = resp.start_qa_salary;\r",
							"\r",
							"//    console.log(salary);\r",
							"//    console.log(resp_salary);\r",
							"    \r",
							"    pm.test(\"response start_qa_salary = request salary\", function () {\r",
							"    pm.expect(salary).to.eql(resp_salary);\r",
							"    })\r",
							"\r",
							"\r",
							"   let start_salary = resp.person.u_name[1]\r",
							"   let x2_salary = resp.qa_salary_after_6_months\r",
							"   let x4_salary = resp.person.u_salary_1_5_year\r",
							"   let x2_9_salary = resp.qa_salary_after_12_months\r",
							"\r",
							"\r",
							"\r",
							"   pm.test(\"Salary is correct\", function(){\r",
							"   pm.expect(x2_salary).to.eql(resp_salary * 2)\r",
							"   pm.expect(x4_salary).to.eql(resp_salary * 4)\r",
							"   pm.expect(x2_9_salary).to.eql(resp_salary * 2.9)\r",
							"   })\r",
							"//    console.log(x4_salary)\r",
							"//    console.log(pm.response.json().person);\r",
							"\r",
							"\r",
							"// 2.4\r",
							"pm.environment.set(\"u_salary_1_5_year\", resp.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 26,\r\n    \"salary\": 1000,\r\n    \"name\": \"Oleksii\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3.2\r",
							"pm.test(\"Json-schema is ok\", function () {const schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"\r",
							"// 3.3\r",
							"    let resp = pm.response.json()\r",
							"    let start_salary = resp.salary[0]\r",
							"    let x2_salary = resp.salary[1]\r",
							"    let x3_salary = resp.salary[2]\r",
							"\r",
							"pm.test('Salary is correct!', function(){\r",
							"    pm.expect(+x2_salary).to.eql(start_salary * 2)\r",
							"    pm.expect(+x3_salary).to.eql(start_salary * 3)\r",
							"})\r",
							"\r",
							"// 3.4\r",
							"pm.test('Second one is more than first and zero!', function(){\r",
							"    pm.expect(+x3_salary > start_salary && +x3_salary > x2_salary).to.be.true\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleksii",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4.2\r",
							"pm.test(\"Json-schema is ok\", function () {const schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"daily_food\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"daily_sleep\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"// 4.3\r",
							"let resp = pm.response.json();\r",
							"let weight = request.data.weight;\r",
							"let daily_food = resp.daily_food;\r",
							"let daily_sleep = resp.daily_sleep;\r",
							"\r",
							"pm.test(\"daily_food_sleep_check\", function(){\r",
							"    pm.expect(daily_food).to.eql(weight * 0.012);\r",
							"    pm.expect(daily_sleep).to.eql(weight*2.5)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "60",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleksii",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5 get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Json-schema is ok\", function () {const schema = {\r",
							"\"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"\r",
							"// 5.3\r",
							"let name1 = pm.environment.get(\"name_e\")\r",
							"let resp = pm.response.json();\r",
							"let resp_name = resp.name\r",
							"pm.test(\"name = name in environment\", function (){\r",
							"  pm.expect(resp_name).to.eql(name1)\r",
							"})\r",
							"\r",
							"//  console.log(name1)\r",
							"//  console.log(resp)\r",
							"//  console.log(resp_name)\r",
							"\r",
							"\r",
							"// 5.4\r",
							"let reqBody = request.data;\r",
							"let resp_age = resp.age;\r",
							"let req_age = request.data.age;\r",
							"\r",
							"pm.test(\"resp age = req age\", function (){\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"})\r",
							"// console.log(req_age)\r",
							"// console.log(resp_age)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Oleksii",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6 currency",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7 curr_byn",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "455",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}